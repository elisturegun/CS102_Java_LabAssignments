import java.util.Arrays;
/**
 * An Integer Bag class to store int values
 * @author Oyku Elis Turegun
 * @version 18.06.2021
 */
public class IntBag {
    //properties
    int [] bag;
    
    //constructors
    public IntBag() {
        bag = new int[4];
    }
    
    
    /**
     * adding method for adding a new number to the bag
     * @param int newNum
     */
    public void add(int newNum ) {
        
        int maxCapacity = bag.length* 2;
        int [] newBag = new int[maxCapacity];
        for(int k = 0; k < bag.length; k++ ) {
            newBag[k] = bag[k];
        }
        for ( int j = 0; j < newBag.length-1; j++) {
            if( newBag[j] <= 0 ) {
                newBag[j] = newNum;
                newBag[j+1] = -1;
            }
        }  
    }
    
    /**
     * adding method for adding a new number to spesific index in the bag
     * @param int newNum, int index
     */
    public void add(int newNum, int index ) {
        if ( index > 0 ) { 
            if ( index < bag.length ) {
                int term = bag[index];
                bag[index] = newNum;
                for(int j = index; bag[j] >= 0 && bag.length -1 > j; j++) {
                    bag[j] = term;
                    term = bag[j+1];
                }
            }
            else if ( index >= bag.length ) {
                int maxCapacity = bag.length* 2;

                int [] newBag = new int[maxCapacity];
                
                for(int k = 0; k < bag.length; k++ ) {
                    newBag[k] = bag[k];
                }
                int term = newBag[index];
                newBag[index] = newNum;
                
                for(int j = index; newBag[j] >= 0 && newBag.length -1 > j; j++) {
                    newBag[j] = term;
                    term = newBag[j+1];
                }    
            }
        }
        else {
            System.out.println("Invalid index");
        }       
    }
    
    /**
     * checking if the given value is in the bag oor not
     * @param int value
     * @return boolean check 
     */
    public boolean hasValue( int value ) {
        boolean check = false;
        for ( int a = 0; a < bag.length; a++) {
            if ( bag[a] == value ) {
                check = true;
            }
        }
        return check;   
    }
    
    /**
     * finding certain value in the given index
     * @param int index
     * @return currentSize
     */
    public int findValue( int index ) {
        if(index >= bag.length) {
            System.out.println("Index is not valid");
        }
        return bag[index];
    }
    
    /**
     * method to calculate current size
     * @return currentSize
     */
    public int findSize(IntBag bag2) {
        int currentSize = 0;
        for(int j = 0; j < bag2.bag.length; j++ ) {
            if ( bag2.bag[j] >= 0 ) {
                currentSize++;
            }
        }
        return currentSize;
    }
    
    /**
     * String representation of a bag
     */
    public String toString( IntBag bag2) {
        String result = "Values: ";
        for ( int i = 0; i < bag2.bag.length; i++) {
            if( bag2.bag[i] > 0 ) {
                result = result + " " + bag2.bag[i] + " "; 
            }
        }
        result = result + "\n Size: " + findSize(bag2);
        return result;
    }  
}
