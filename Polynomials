/**
 * Polynomial class for Java
 * @author Elis Turegun 21902976
 * @version 10.02.21
 */
 public class Polynomial {
     
    //properties
    
    private int exp;
    private double coe;
    private double [] coefficientList;
    
    //constructors
    
    public Polynomial( double coe, int exp) {
        this.coe = coe;
        this.exp = exp; 
        coefficientList = new double[1];
        coefficientList[0] = coe;
    }
    
    // default constructor
    public Polynomial() {
        coefficientList = new double[1];
        coefficientList[0] = 0;
    }
   
    
    public Polynomial( double[] arr ) {
        coefficientList = new double[arr.length];
        
        for ( int i = 0; i < arr.length; i++ ) {
            coefficientList[i] = arr[i];
        }
    }
    
    //methods
    
    public double getCoe() {
        return coe;
        
    }
    public int getExp() {
        return exp;
        
    }

    
    /**
     * Getter method for coefficient
     * @param int degree
     * @return coefficient of term with given degree
     */
    public double getCoefficient(int degree)
    {
        if ( coefficientList.length == 1 && getExp() == degree ) {
            return getCoe();
        }
        else if ( coefficientList.length == 1 && getExp() != degree ) {
            return 0;
        }
        else {
            return coefficientList[degree];
        }
    }
    
    /**
     * Getter method for degree of polynomial
     * @return int degree
     */
    public int getDegree() {
        if ( coefficientList.length == 1 && getExp() != 0 ) {
            return getExp();
        }
        else {
            return coefficientList.length-1;   
        }
    }
    
    /**
     * String representation of polynomial
     * @return polynomial expression
     */
    public String toString() {
        String result = ""; 
        
            for ( int k = 0; k < coefficientList.length; k++ ) {
                
                if( coefficientList.length == 1 ) {
                    if (coefficientList[0] != 0 ) {
                        result = coefficientList[0] + " x^ " + getExp();
                    }
                    else if ( coefficientList[0] == 0 ) {
                        result = result + 0;
                    } 
                }

                else {
                    if ( coefficientList[k] == 0 ) {
                        result = result + "";
                    }
                    else {
                        if ( k == 0 ) {
                            result = coefficientList[k] + " + ";
                        
                        }
                        else if ( k > 0 && k < coefficientList.length - 1 ){
                            result = result + coefficientList[k] + "x^" + k + " + ";
                        }
                        else if ( k == coefficientList.length - 1  ) {
                            result = result + coefficientList[k] + "x^" + k;
                        } 
                    }
                }
 
            }
        return "P(x) = " + result;
    }
    /**
     * Evaluating polynomial expression with given x
     * @param double x
     * @return result of evaluation
     */
    public double eval( double x ) {
        double resultEval;
        resultEval = 0;
        if ( coefficientList.length == 1 ) {
            resultEval = resultEval + coe * Math.pow(x,exp);
        }
        else {
            for ( int i = 0; i < coefficientList.length; i++ ) {
            
                resultEval = resultEval + coefficientList[i]*Math.pow(x,i);

            }
        }
        return resultEval;
  
    }
    /**
     * Horner method
     * @param double x
     * @return result of evaluation
     */
    public double eval2( double x ) {
        double resultEval2;
        resultEval2 = 0;
        if ( coefficientList.length == 1 ) {
            resultEval2 = resultEval2 + coe * Math.pow(x,exp);
        }
        else {
            for (int i = coefficientList.length - 1; i >= 0; i--) {
                resultEval2 = coefficientList[i] + (x * resultEval2);
    
            }
        }
        return resultEval2;
    }

}

/**
 * Test class with main method for Polynomial class
 * @author Elis Turegun 21902976
 * @version 10.02.21
 */
public class Tester {
    public static void main (String [] args) {
        
        //variables
        
        final String SEPERATOR = "-----------------------------------";
        double[] arr = { 0,4,3,6,5};
        
        //program code
        
        Polynomial p5 = new Polynomial( arr );
        System.out.println(p5.getCoefficient(3));
        System.out.println(p5.getDegree());
        System.out.println(p5.eval(2));
        System.out.println(p5.eval2(2));
        System.out.println(p5.toString());
        System.out.println(SEPERATOR);

        Polynomial p3 = new Polynomial( 4, 5 );
        System.out.println(p3.toString());
        System.out.println(p3.getCoefficient(3));
        System.out.println(p3.getDegree());
        System.out.println(p3.eval(2));
        System.out.println(p3.eval2(2));
        System.out.println(SEPERATOR);
        
        Polynomial p2 = new Polynomial( 4, 3 );
        System.out.println(p2.toString());
        System.out.println(p2.getCoefficient(1));
        System.out.println(p2.getDegree());
        System.out.println(p2.eval(2));
        System.out.println(p2.eval2(2));
        System.out.println(SEPERATOR);
        
        Polynomial p1 = new Polynomial();
        System.out.println(p1.toString());
        System.out.println(p1.getCoefficient(1));
        System.out.println(p1.getDegree());
        System.out.println(p1.eval(2));
        System.out.println(p1.eval2(2));
   
    }
}
